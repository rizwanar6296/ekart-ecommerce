<style>
    .g-height-50 {
        height: 50px;
    }

    .g-width-50 {
        width: 50px !important;
    }

    @media (min-width: 0) {
        .g-pa-30 {
            padding: 2.14286rem !important;
        }
    }

    .g-bg-secondary {
        background-color: #fafafa !important;
    }

    .u-shadow-v18 {
        box-shadow: 0 5px 10px -6px rgba(0, 0, 0, 0.15);
    }

    .g-color-gray-dark-v4 {
        color: #777 !important;
    }

    .g-font-size-12 {
        font-size: 0.85714rem !important;
    }

    .media-comment {
        margin-top: 20px
    }

    .singleImageCanvasContainer {
        overflow: hidden;
        height: 200px;
        width: 30%;
        display: inline-block;
        position: relative;
        padding-right: 0px;
        margin-right: 15px;
        border: 2px solid #dfdfdf;
        margin-bottom: 10px;
        padding: 4px;
        border-radius: .25rem;
    }

    .singleImageCanvasContainer .singleImageCanvasCloseBtn {
        position: absolute;
        right: 0;
    }

    .singleImageCanvasContainer .singleImageCanvas {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>
    <div class="container col-6 mt-5">
        <h2 class="text-center mb-5">Add Product</h2>
        <form action="/admin/add-product" enctype="multipart/form-data" method="post">
        <div class="row">
             <div class="form-outline col-6 mb-4">
                <input type="text" id="productName" name="productName" class="form-control"  required />
                <label class="form-label">Product Name</label>
            </div>
           <div class="form-outline col-6 mb-4">
                <input type="number" id="price" name="price" class="form-control" required />
                <label class="form-label">Price</label>
            </div>
        </div>
           

            <!-- Username input -->
            <div class="row">

           
            <div class="form-outline col-6 mb-4">
                <input type="number" id="discount" name="discount" class="form-control" value="0" required />
                <label class="form-label">Discount</label>
            </div>
            <div class="form-outline col-6 mb-4">
            <input type="number" id="stock" name="stock" class="form-control" required />
            <label class="form-label">Stock</label>
            
            </div>
             </div>
            <div class="row">
            <div class="col-6">
            <div><label class="form-label" >Brand</label></div>
            <select class="form-select form-select-sm mb-4" name="brand" aria-label=".form-select-lg example" required>
            <option selected>Open this select menu</option>
            {{#each brands}}
            <option value={{this.brand}}>{{this.brand}}</option>
            {{/each}} 
          </select>
            </div>
            <div class="col-6">
                 <div><label class="form-label" >Type</label></div>
                <select class="form-select form-select-sm mb-4" name="type" aria-label=".form-select-lg example" required>
            <option selected>Open this select menu</option>
            {{#each category.type}}
            <option value={{this}}>{{this}}</option>
            {{/each}}  
          </select></div>
         </div>

            <!-- Email input -->
            <div class="form-outline mb-4">
                <input type="text" id="description" name="description" class="form-control" required />
                <label class="form-label" >Description</label>
            </div>

            <!-- Password input -->
           
            {{!-- {{#each alert}}
                <div style="color:red;"> {{this.msg}}</div>
            {{/each}} --}}
            {{#if addProductSuccess}}
                <div class="alert alert-success" role="alert">{{addProductSuccess}}</div>
            {{/if}}
            <button type="submit" class="btn btn-success mt-4">Submit</button>
            <a href="/admin/product-details" class="btn btn-primary mt-4" style="float:right;">back</a>
            {{!-- sddsddddddddddddddddddddddddddddddddddddddddddddddddd --}}
                <div class="container m-5">
                    {{!-- <fieldset class="form-group"> --}}

                        <label for="id_image">Image</label><br>
                        <input type="file" id="id_image" name="image" accept="image/*" multiple><br>
                        {{!--
                    </fieldset> --}}
                    {{!-- <div class="form-group">
                        <button id="confirm-btn" style="margin-top: 10px;" type="submit">Post</button>
                    </div> --}}

                    <div class="form-group">
                        <div id="image-box" class="image-container" style="height: 500px; width: 700px;">
                        </div>
                        <button class="btn btn-outline-info" id="crop-btn"
                            style="width: 100%; margin-top: 10px; display: none;"
                            type="button">Crop</button>
                        <button hidden class="btn btn-outline-info" id="confirm-btn"
                            style="width: 100%; margin-top: 10px;" type="submit">Post</button>
                    </div>
            {{!-- sssssssssssssssssssssssssssssssssssssssssssssssssssssss --}}
        </form>
    </div>
</div>


</main>
<script>
    // image-box is the id of the div element that will store our cropping image preview
    const imagebox = document.getElementById('image-box')
    // crop-btn is the id of button that will trigger the event of change original file with cropped file.
    const crop_btn = document.getElementById('crop-btn')
    // id_image is the id of the input tag where we will upload the image
    const input = document.getElementById('id_image')

    // When user uploads the image this event will get triggered
    input.addEventListener('change', () => {
        // Getting image file object from the input variable
        const img_data = input.files[0]
        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        const url = URL.createObjectURL(img_data)

        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
        imagebox.innerHTML = `<img src="${url}" id="image" style="width:100%;">`

        // Storing that cropping view image in a variable
        const image = document.getElementById('image')

        // Displaying the image box
        document.getElementById('image-box').style.display = 'block'
        // Displaying the Crop buttton
        document.getElementById('crop-btn').style.display = 'block'
        // Hiding the Post button
        document.getElementById('confirm-btn').style.display = 'none'

        // Creating a croper object with the cropping view image
        // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
        // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
        const cropper = new Cropper(image, {
            autoCropArea: 1,
            viewMode: 1,
            scalable: false,
            zoomable: false,
            movable: false,
            minCropBoxWidth: 200,
            minCropBoxHeight: 200,
        })

        // When crop button is clicked this event will get triggered
        crop_btn.addEventListener('click', () => {
            // This method coverts the selected cropped image on the cropper canvas into a blob object
            cropper.getCroppedCanvas().toBlob((blob) => {

                // Gets the original image data 
                let fileInputElement = document.getElementById('id_image').files[0];
                alert(fileInputElement)
                // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                // Create a new container
                let container = new DataTransfer();
                // Add the cropped image file to the container
                container.items.add(file);
                // Replace the original image file with the new cropped image file
                fileInputElement.files=container.files
                 

                // Hide the cropper box
                document.getElementById('image-box').style.display = 'none'
                // Hide the crop button
                document.getElementById('crop-btn').style.display = 'none'
                // Display the Post button
                document.getElementById('confirm-btn').style.display = 'block'

            });
        });
    });	

    
</script>